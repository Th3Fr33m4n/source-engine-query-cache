package packets

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestParseGoldsrcMultipacketResponse(t *testing.T) {
	p1 := []byte{0xFE, 0xFF, 0xFF, 0xFF, 0xB4, 0x27, 0x00, 0x00, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0x45, 0x6D, 0x00, 0x61, 0x64, 0x6D}
	p2 := []byte{0xFE, 0xFF, 0xFF, 0xFF, 0xB4, 0x27, 0x00, 0x00, 0x12, 0x61, 0x72, 0x74, 0x6D, 0x6F, 0x6E, 0x65, 0x79, 0x00, 0x38}

	pNumber, totalPackets := ParseGoldsrcMultipacketResponse(p1)

	assert.Equal(t, byte(0), pNumber)
	assert.Equal(t, byte(2), totalPackets)

	pNumber, totalPackets = ParseGoldsrcMultipacketResponse(p2)

	assert.Equal(t, byte(1), pNumber)
	assert.Equal(t, byte(2), totalPackets)
}

func TestParseSourceMultipacketResponse(t *testing.T) {
	p1 := []byte{0xFE, 0xFF, 0xFF, 0xFF, 0xB4, 0x27, 0x00, 0x00, 0x00, 0x02, 0xFF, 0xFF, 0xFF, 0x45, 0x6D, 0x00, 0x61, 0x64, 0x6D}
	p2 := []byte{0xFE, 0xFF, 0xFF, 0xFF, 0xB4, 0x27, 0x00, 0x00, 0x01, 0x02, 0x72, 0x74, 0x6D, 0x6F, 0x6E, 0x65, 0x79, 0x00, 0x38}

	pNumber, totalPackets := ParseSourceMultipacketResponse(p1)

	assert.Equal(t, byte(0), pNumber)
	assert.Equal(t, byte(2), totalPackets)

	pNumber, totalPackets = ParseSourceMultipacketResponse(p2)

	assert.Equal(t, byte(1), pNumber)
	assert.Equal(t, byte(2), totalPackets)
}

func TestIsA2sRulesWChallenge(t *testing.T) {
	b := IsA2sRulesWChallenge([]byte{0xFF, 0xFF, 0xFF, 0xFF, 0x56, 0x27, 0x20, 0xF5, 0xAB})
	b2 := IsA2sRulesWChallenge([]byte{0xFF, 0xFF, 0xFF, 0xFF, 0x55, 0x27, 0x20, 0xF5, 0xAB})
	assert.True(t, b)
	assert.False(t, b2)
}

func TestIsA2sPlayersWChallenge(t *testing.T) {
	b := IsA2sPlayersWChallenge([]byte{0xFF, 0xFF, 0xFF, 0xFF, 0x55, 0x27, 0x20, 0xF5, 0xAB})
	b2 := IsA2sPlayersWChallenge([]byte{0xFF, 0xFF, 0xFF, 0xFF, 0x56, 0x27, 0x20, 0xF5, 0xAB})
	assert.True(t, b)
	assert.False(t, b2)
}

func TestIsA2sInfoWChallenge(t *testing.T) {
	b := IsA2sInfoWChallenge([]byte{
		0xFF, 0xFF, 0xFF, 0xFF, 0x54, 0x53, 0x6F, 0x75, 0x72, 0x63, 0x65,
		0x20, 0x45, 0x6E, 0x67, 0x69, 0x6E, 0x65, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x00,
		0x20, 0x32, 0xf5, 0x46,
	})
	b2 := IsA2sInfoWChallenge([]byte{
		0xFF, 0xFF, 0xFF, 0xFF, 0x54, 0x53, 0x6F, 0x75, 0x72, 0x63, 0x65,
		0x20, 0x45, 0x6E, 0x67, 0x69, 0x6E, 0x65, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x00,
	})
	assert.True(t, b)
	assert.False(t, b2)
}
